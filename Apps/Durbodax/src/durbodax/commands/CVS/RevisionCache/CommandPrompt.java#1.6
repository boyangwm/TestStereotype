package durbodax.commands;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Kirk Seddon
 */
public final class CommandPrompt {

    private int currentIndex;
    private final String[] userPrompts;
    private final BufferedReader bufferedReader;
  
    public CommandPrompt(String[] prompts) {

        userPrompts = prompts;
        currentIndex = 0;
        bufferedReader = new BufferedReader(new InputStreamReader(System.in));

    }
    
    public int size() {

        return userPrompts.length;
    }
    
    public String getPrompt(int i) {

        return userPrompts[i];
    }

    public void reset() {

        currentIndex = 0;

    }
    
    public String displayNextPrompt() {

        
        try {

            String userInput = "";
            boolean isValid = false;
            boolean firstTry = true;
            do {

                if(!firstTry) {

                    System.out.println("Invalid input, please try again.");

                }
                 System.out.print(userPrompts[currentIndex] + ": ");
                 userInput = bufferedReader.readLine();

                 Test test = Test.getTest(userPrompts[currentIndex+1]);
                 switch(test) {

                    case Number:

                         isValid = number.validate(userInput);

                         break;

                     case String:

                         isValid = string.validate(userInput);

                         break;
                 }
                 firstTry = false;

            } while(isValid == false) ;

            currentIndex+=2;
            return userInput.trim();

        } catch(IOException e) {

             System.out.println(e.getStackTrace());
             System.out.println(e.getMessage());
        }
        
        currentIndex+=2;
        return " ";      
  }

    PromptTest number = new PromptTest() {
        public boolean validate(String input) {
            try {
                Integer.parseInt(input);
                return true;

            } catch (NumberFormatException e) {
                return false;
            }
        }
    };

    PromptTest string = new PromptTest() {
        public boolean validate(String input) {
          return !"".equals(input.trim());
        }
      };

      public enum Test {

          Number("number"),
          String("string");

          private static final Map<String, Test> lookup = new HashMap<String, Test>();
          private String testType;

          static {

              for(Test test : EnumSet.allOf(Test.class)) {

                  lookup.put(test.getTestType(), test);

              }

          }

          private Test(String testType) {

              this.testType = testType;

          }

          public String getTestType() {

              return testType;

          }

          public static Test getTest(String testType) {

            return lookup.get(testType);

        }

      }


}